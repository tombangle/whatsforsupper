import React, { useState } from 'react';
import { 
  ScrollView, 
  View, 
  Text, 
  TouchableOpacity, 
  Alert, 
  ActivityIndicator 
} from 'react-native';

import Header from '../src/components/Header';
import DaySelector from '../src/components/DaySelector';
import DietaryFilters from '../src/components/DietaryFilters';
import MealCard from '../src/components/MealCard';
import ShoppingList from '../src/components/ShoppingList';
import CookingInstructions from '../src/components/CookingInstructions';
import { fetchMultipleRandomMeals, Meal } from '../src/services/mealApi';
import { appStyles as styles } from '../src/styles/appStyles';

export default function Index() {
  const [userName, setUserName] = useState('');
  const [selectedDays, setSelectedDays] = useState<string[]>([]);
  const [dietaryFilters, setDietaryFilters] = useState<string[]>([]);
  const [meals, setMeals] = useState<Meal[]>([]);
  const [loading, setLoading] = useState(false);

  const handleDayToggle = (day: string) => {
    setSelectedDays(prev => 
      prev.includes(day) 
        ? prev.filter(d => d !== day)
        : [...prev, day]
    );
  };

  const generateMealPlan = async () => {
    if (selectedDays.length === 0) {
      Alert.alert('No Days Selected', 'Please select at least one day to generate a meal plan.');
      return;
    }

    setLoading(true);
    try {
      const fetchedMeals = await fetchMultipleRandomMeals(selectedDays.length, dietaryFilters);
      setMeals(fetchedMeals);
      
      if (dietaryFilters.length > 0) {
        Alert.alert(
          'Meal Plan Generated', 
          `Your meal plan has been created with ${dietaryFilters.length} dietary restriction(s) applied.`,
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to generate meal plan. Please try again.');
      console.error('Error generating meal plan:', error);
    } finally {
      setLoading(false);
    }
  };

  const printMealPlan = () => {
    if (meals.length === 0) {
      Alert.alert('No Meal Plan', 'Please generate a meal plan first before printing.');
      return;
    }

    const planText = `${userName ? `${userName}'s` : 'Your'} Meal Plan - ${new Date().toLocaleDateString()}\n\n${dietaryFilters.length > 0 ? `Dietary Restrictions: ${dietaryFilters.join(', ')}\n\n` : ''}${meals.map((meal, index) => `${selectedDays[index].toUpperCase()}: ${meal.strMeal}\nCategory: ${meal.strCategory} ‚Ä¢ ${meal.strArea}\n\nIngredients:\n${Array.from({length: 20}, (_, i) => i + 1).map(i => {
      const ingredient = meal[`strIngredient${i}` as keyof Meal];
      const measure = meal[`strMeasure${i}` as keyof Meal];
      return ingredient && ingredient.trim() ? `‚Ä¢ ${measure ? measure.trim() + ' ' : ''}${ingredient.trim()}` : '';
    }).filter(Boolean).join('\n')}\n\nInstructions:\n${meal.strInstructions}\n\n${'='.repeat(50)}\n`).join('')}Generated by Random Meal Planner`;

    // Create a new window with the meal plan for printing
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Meal Plan</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
              h1 { color: #333; border-bottom: 2px solid #007AFF; }
              .meal { margin-bottom: 30px; page-break-inside: avoid; }
              .day { font-weight: bold; color: #007AFF; font-size: 18px; }
              .meal-image { width: 200px; height: 150px; object-fit: cover; border-radius: 8px; margin: 10px 0; }
              .ingredients { margin: 10px 0; }
              .instructions { margin: 10px 0; }
              @media print { body { margin: 0; } .meal-image { max-width: 150px; max-height: 112px; } }
            </style>
          </head>
          <body>
            <h1>${userName ? `${userName}'s` : 'Your'} Meal Plan</h1>
            <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>
            ${dietaryFilters.length > 0 ? `<p><strong>Dietary Restrictions:</strong> ${dietaryFilters.join(', ')}</p>` : ''}
            ${meals.map((meal, index) => `
              <div class="meal">
                <div class="day">${selectedDays[index].toUpperCase()}: ${meal.strMeal}</div>
                <p><strong>Category:</strong> ${meal.strCategory} ‚Ä¢ ${meal.strArea}</p>
                <img src="${meal.strMealThumb}" alt="${meal.strMeal}" class="meal-image" />
                <div class="ingredients">
                  <strong>Ingredients:</strong>
                  <ul>
                    ${Array.from({length: 20}, (_, i) => i + 1).map(i => {
                      const ingredient = meal[`strIngredient${i}` as keyof Meal];
                      const measure = meal[`strMeasure${i}` as keyof Meal];
                      return ingredient && ingredient.trim() ? `<li>${measure ? measure.trim() + ' ' : ''}${ingredient.trim()}</li>` : '';
                    }).filter(Boolean).join('')}
                  </ul>
                </div>
                <div class="instructions">
                  <strong>Instructions:</strong>
                  <p>${meal.strInstructions}</p>
                </div>
              </div>
            `).join('')}
            <footer style="margin-top: 30px; text-align: center; color: #666;">
              Generated by Random Meal Planner
            </footer>
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    } else {
      Alert.alert('Print Error', 'Unable to open print window. Please check your browser settings.');
    }
  };

  return (
    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>
      <Header userName={userName} onNameChange={setUserName} />
      
      <DaySelector selectedDays={selectedDays} onDayToggle={handleDayToggle} />
      
      <DietaryFilters filters={dietaryFilters} onFiltersChange={setDietaryFilters} />
      
      <View style={styles.generateSection}>
        <TouchableOpacity 
          style={[styles.generateButton, loading && styles.disabledButton]} 
          onPress={generateMealPlan}
          disabled={loading}
          activeOpacity={0.8}
        >
          {loading ? (
            <ActivityIndicator color="#fff" size="small" />
          ) : (
            <Text style={styles.generateButtonText}>Generate Meal Plan</Text>
          )}
        </TouchableOpacity>

        
        {meals.length > 0 && (
          <TouchableOpacity 
            style={styles.printButton} 
            onPress={printMealPlan}
            activeOpacity={0.8}
          >
            <Text style={styles.printButtonText}>üñ®Ô∏è Print Meal Plan</Text>
          </TouchableOpacity>
        )}
      </View>
      {meals.length > 0 && (
        <View style={styles.mealPlanSection}>
          <Text style={styles.sectionTitle}>
            {userName ? `${userName}'s Meal Plan` : 'Your Meal Plan'}
          </Text>
          {meals.map((meal, index) => (
            <MealCard
              key={meal.idMeal}
              meal={meal}
              day={selectedDays[index]}
              onPress={() => {}}
            />
          ))}
        </View>
      )}

      <ShoppingList meals={meals} />
      <CookingInstructions meals={meals} selectedDays={selectedDays} />
      
      <View style={styles.footer}>
        <Text style={styles.footerText}>¬© 2025 Whats for Supper by BrightForge Labs</Text>
        <Text style={styles.apiCredit}>Powered by TheMealDB</Text>
      </View>
    </ScrollView>
  );
}